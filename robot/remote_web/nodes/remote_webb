#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import String
import sys, select, os
global key


ROBOT_MAX_LIN_VEL = 0.86
ROBOT_MAX_ANG_VEL = 6.63

ROBOT_LINEAR_VEL_STEP_SIZE = 0.02
ROBOT_ANGULAR_VEL_STEP_SIZE = 0.2

robot_node_name = 'remote_webb'

msg = """
Control your robot!
-------------------
Moving key
        U
    L   S   R
        D 

U : the robot goes straight
D : the robot goes backwards 
L : the robot turns left
R : the robot turns right

Press Ctrl+C to quit
"""

err = """
Communications failed -_-
"""

def getkey(data):
        # rospy.loginfo(rospy.get_caller_id() + "I heard %d", data.data) 
        key = data.data 
        return key


def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel, target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min(input, output + slop)
    elif input < output:
        output = max(input, output - slop)
    else:
        output = input
    return output

def constrain(input, low, high):
    if input < low:
        input = low
    elif input > high:
        input = high
    else:
        input = input
    return input

def checkLinearLimitVelocity(vel):
    vel = constrain(vel, -ROBOT_MAX_LIN_VEL, ROBOT_MAX_LIN_VEL)
    return vel 

def checkAngularLimitVelocity(vel):
    vel = constrain(vel, -ROBOT_MAX_ANG_VEL, ROBOT_MAX_ANG_VEL)
    return vel

if __name__ == "__main__":

    rospy.init_node(robot_node_name)
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    button_sub = rospy.Subscriber('button', String, getkey)

    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0
   
    try:
        print(msg)
        while(1):
            # key = getkey()
            if key == "U": 
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel+ROBOT_LINEAR_VEL_STEP_SIZE)
                print(vels(target_linear_vel, target_angular_vel))
            elif key == "D":
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel-ROBOT_LINEAR_VEL_STEP_SIZE)
                print(vels(target_linear_vel, target_angular_vel))
            elif key == "L":
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel+ROBOT_ANGULAR_VEL_STEP_SIZE)
                print(vels(target_linear_vel, target_angular_vel))
            elif key == "R":
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel-ROBOT_ANGULAR_VEL_STEP_SIZE)
                print(vels(target_linear_vel, target_angular_vel))
            elif key == ' '  or key == 'S':
            # elif key == 'S':
                target_linear_vel   = 0.0
                control_linear_vel  = 0.0
                target_angular_vel  = 0.0
                control_angular_vel = 0.0
                print(vels(target_linear_vel, target_angular_vel))
            else: 
                if (key == '\x03'):
                    break
            twist = Twist()

            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (ROBOT_LINEAR_VEL_STEP_SIZE/2.0))
            twist.linear.x = control_linear_vel
            twist.linear.y = 0.0
            twist.linear.z = 0.0

            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ROBOT_ANGULAR_VEL_STEP_SIZE/2.0))
            twist.angular.x = 0.0
            twist.angular.y = 0.0
            twist.angular.z = control_angular_vel

            pub.publish(twist)
            
    except:
            print(err)

    finally:
            twist = Twist()
            twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
            pub.publish(twist)

    rospy.spin()

    